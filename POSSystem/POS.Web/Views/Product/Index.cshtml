@model IEnumerable<POS.Web.Models.Entities.Product>
@using POS.Web.Models.Entities

@{
    ViewData["Title"] = "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
}

<div class="container-fluid">
        <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á -->
    <div class="card mb-3">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-8">
                    <div class="input-group">
                        @* <span class="input-group-text">üîç</span> *@
                        <input type="text" class="form-control" id="searchInput" 
                               placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..." oninput="filterProducts()">
                    </div>
                </div>
                <div class="col-md-4">
                    <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á dropdown ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà -->
                    <select class="form-select" id="categoryFilter">
                        <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
        <div class="btn-group">
            <button class="btn btn-success me-2" onclick="showCategoryModal()">
                üìÅ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            </button>
            <button class="btn btn-primary" onclick="showAddModal()">
                ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
            <button class="btn btn-outline-success me-2" onclick="exportTemplate()">
            üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            </button>
            <button class="btn btn-outline-primary me-2" onclick="document.getElementById('importFile').click()">
            üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
        </div>
        <input type="file" id="importFile" accept=".xlsx" style="display: none;" onchange="importExcel(this)" />
    </div>

    <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ -->
    <div class="card">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                        <th>‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î</th>
                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                        <th class="text-end">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                        <th class="text-center">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                        <th class="text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</th>
                        <th class="text-end">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td data-category-id="@item.CategoryId">@item.Category?.Name</td>
                            <td>@item.Barcode</td>
                            <td>@item.Name</td>
                            <td class="text-end">@item.Price.ToString("N2")</td>
                            <td class="text-center">
                                <span class="badge @(item.Stock > 10 ? "bg-success" : "bg-danger")">
                                    @item.Stock
                                </span>
                            </td>
                            <td class="text-center">
                                <div class="form-check form-switch d-flex justify-content-center">
                                    <input class="form-check-input" type="checkbox" 
                                        onchange="toggleStatus(@item.Id, this)"
                                        @(item.Status ? "checked" : "")>
                                </div>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.ImageBase64))
                                {
                                    <img src="data:@item.ImageType;base64,@item.ImageBase64" 
                                        alt="@item.Name" class="product-image" />
                                }
                            </td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-info" onclick="showEditModal(@item.Id)">
                                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteProduct(@item.Id)">
                                ‡∏•‡∏ö
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà -->
                <form id="categoryForm" class="mb-4">
                    <div class="input-group">
                        <input type="text" class="form-control" id="newCategoryName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà">
                        <button type="button" class="btn btn-success" onclick="addCategory()">
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°
                        </button>
                    </div>
                </form>

                <!-- Switch ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -->
                <div class="d-flex justify-content-end mb-3">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="showDeletedSwitch"
                            onchange="toggleCategoryView()">
                        <label class="form-check-label" for="showDeletedSwitch">
                            ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                        </label>
                    </div>
                </div>

                <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà -->
                <div class="table-responsive">
                    <table class="table table-hover" id="categoryTable">
                        <thead class="table-light">
                            <tr>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                                <th class="text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                                <th class="text-end">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in (List<Category>)ViewBag.Categories)
                            {
                                var productCount = ((Dictionary<int, int>)ViewBag.ProductCounts)[category.Id];

                                <tr data-category-id="@category.Id" data-active="true">
                                    <td>
                                        <span class="category-name">@category.Name</span>
                                        <input type="text" class="form-control category-edit d-none" value="@category.Name">
                                    </td>
                                    <td class="text-center">
                                        @productCount ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                    </td>
                                    <td class="text-end">
                                        <button class="btn btn-sm btn-warning edit-btn"
                                            onclick="startEditCategory(this, @category.Id)">
                                            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                        </button>
                                        <button class="btn btn-sm btn-success save-btn d-none"
                                            onclick="saveCategory(this, @category.Id)">
                                            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteCategory(@category.Id)">
                                            üóëÔ∏è ‡∏•‡∏ö
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Products -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="productForm" novalidate>
                    <input type="hidden" id="productId" />
                    
                    <div class="mb-3">
                        <label for="categoryId" class="form-label">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà <span class="text-danger">*</span></label>
                        <select class="form-select" id="categoryId" required>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...</option>
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <div class="invalid-feedback">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
                    </div>

                    <div class="mb-3">
                        <label for="barcode" class="form-label">‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="barcode" required>
                        <div class="invalid-feedback">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î</div>
                    </div>

                    <div class="mb-3">
                        <label for="name" class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="name" required>
                        <div class="invalid-feedback">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
                    </div>

                    <div class="mb-3">
                        <label for="price" class="form-label">‡∏£‡∏≤‡∏Ñ‡∏≤ <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="price" min="0" step="0.01" required>
                        <div class="invalid-feedback">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤</div>
                    </div>

                    <div class="mb-3">
                        <label for="stock" class="form-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="stock" min="0" required>
                        <div class="invalid-feedback">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</div>
                    </div>

                    <div class="mb-3">
                        <label for="image" class="form-label">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
                        <input type="file" class="form-control" id="image" accept="image/*">
                        <div id="imagePreview" class="mt-2"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button type="button" class="btn btn-primary" onclick="saveProduct()">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    @* // script Categories *@
    <script>
        let categoryModal;
        let isShowingDeleted = false;

        document.addEventListener('DOMContentLoaded', function () {
            categoryModal = new bootstrap.Modal(document.getElementById('categoryModal'));
        });

        function toggleCategoryView() {
            const showDeleted = document.getElementById('showDeletedSwitch').checked;
            loadCategories(showDeleted);
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Modal
        function showCategoryModal() {
            const modal = new bootstrap.Modal(document.getElementById('categoryModal'));
            modal.show();
        }

        async function loadCategories(showDeleted = false) {
            try {
                const response = await fetch(`/Product/GetCategories?showDeleted=${showDeleted}`);
                const data = await response.json();

                const tbody = document.querySelector('#categoryTable tbody');
                tbody.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°

                data.forEach(category => {
                    const tr = document.createElement('tr');
                    tr.dataset.categoryId = category.id;
                    tr.dataset.active = !showDeleted;

                    tr.innerHTML = `
                                    <td>
                                        <span class="category-name">${category.name}</span>
                                        <input type="text" class="form-control category-edit d-none" value="${category.name}">
                                    </td>
                                    <td class="text-center">
                                        ${category.productCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                    </td>
                                    <td class="text-end">
                                        ${!showDeleted ? `
                                            <button class="btn btn-sm btn-warning edit-btn" onclick="startEditCategory(this, ${category.id})">
                                                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                            </button>
                                            <button class="btn btn-sm btn-success save-btn d-none" onclick="saveCategory(this, ${category.id})">
                                                üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                            </button>
                                            <button class="btn btn-sm btn-danger" onclick="deleteCategory(${category.id})">
                                                üóëÔ∏è ‡∏•‡∏ö
                                            </button>
                                        ` : `
                                            <button class="btn btn-sm btn-primary" onclick="restoreCategory(${category.id})">
                                                ‚ôªÔ∏è ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                                            </button>
                                        `}
                                    </td>
                                `;

                    tbody.appendChild(tr);
                });
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }
        async function addCategory() {
            const name = document.getElementById('newCategoryName').value;
            if (!name) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
                return;
            }

            try {
                const response = await fetch('/Product/AddCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name })
                });

                const result = await response.json();

                if (result.success) {
                    location.reload();
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }

        async function startEditCategory(btn, id) {
            const row = btn.closest('tr');
            row.querySelector('.category-name').classList.add('d-none');
            row.querySelector('.category-edit').classList.remove('d-none');
            row.querySelector('.edit-btn').classList.add('d-none');
            row.querySelector('.save-btn').classList.remove('d-none');
        }

        async function saveCategory(btn, id) {
            const row = btn.closest('tr');
            const input = row.querySelector('.category-edit');
            const name = input.value.trim();

            if (!name) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
                input.focus();
                return;
            }

            try {
                const response = await fetch('/Product/UpdateCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id, name })
                });

                const result = await response.json();

                if (result.success) {
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    const nameSpan = row.querySelector('.category-name');
                    nameSpan.textContent = name;

                    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠
                    nameSpan.classList.remove('d-none');
                    input.classList.add('d-none');

                    // ‡∏™‡∏•‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
                    row.querySelector('.edit-btn').classList.remove('d-none');
                    row.querySelector('.save-btn').classList.add('d-none');

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dropdown ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    const categorySelect = document.getElementById('categoryId');
                    if (categorySelect) {
                        const option = categorySelect.querySelector(`option[value="${id}"]`);
                        if (option) {
                            option.textContent = name;
                        }
                    }

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dropdown filter (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    const filterSelect = document.getElementById('categoryFilter');
                    if (filterSelect) {
                        const filterOption = filterSelect.querySelector(`option[value="${id}"]`);
                        if (filterOption) {
                            filterOption.textContent = name;
                        }
                    }

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    const toast = document.createElement('div');
                    toast.className = 'alert alert-success alert-dismissible fade show position-fixed top-0 end-0 m-3';
                    toast.innerHTML = `
                                                                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
                                                                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                                                                `;
                    document.body.appendChild(toast);

                    // ‡∏•‡∏ö toast ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);

                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                    input.focus();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                input.focus();
            }
        }

        async function deleteCategory(id) {
            if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ?')) {
                return;
            }

            try {
                const response = await fetch('/Product/DeleteCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(id)  // ‡∏™‡πà‡∏á id ‡πÄ‡∏õ‡πá‡∏ô JSON
                });

                const result = await response.json();

                if (result.success) {
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    const row = document.querySelector(`tr[data-category-id="${id}"]`);
                    if (row) {
                        // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                        row.style.display = 'none';
                        // ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
                        // row.remove();
                    }
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    alert('‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }
        async function showDeletedCategories() {
            try {
                const response = await fetch('/Product/DeletedCategories');
                const content = await response.text();

                // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Modal ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                const modal = new bootstrap.Modal(document.createElement('div'));
                modal.element.innerHTML = content;
                modal.show();
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö');
            }
        }

        async function restoreCategory(id) {
            if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ?')) {
                return;
            }

            try {
                const response = await fetch('/Product/RestoreCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(id)
                });

                const result = await response.json();

                if (result.success) {
                    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                    const showDeleted = document.getElementById('showDeletedSwitch').checked;
                    loadCategories(showDeleted);
                    alert('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }
    </script>

    @* //script product *@
    <script>
        let productModal;
        let categorySelect; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á select

        document.addEventListener('DOMContentLoaded', function () {
            productModal = new bootstrap.Modal(document.getElementById('productModal'));
            categorySelect = document.getElementById('categoryId'); // select ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            loadCategoriesForProduct(); // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        });

        document.getElementById('image').addEventListener('change', function (e) {
            const preview = document.getElementById('imagePreview');
            preview.innerHTML = '';

            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('img-fluid', 'mt-2', 'rounded');
                    img.style.maxHeight = '200px';
                    preview.appendChild(img);
                }
                reader.readAsDataURL(this.files[0]);
            }
        });

        async function loadCategoriesForProduct() {
            try {
                const response = await fetch('/Product/GetActiveCategories'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡πÉ‡∏´‡∏°‡πà
                const categories = await response.json();

                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dropdown ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                if (categorySelect) {
                    categorySelect.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏°

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --';
                    categorySelect.appendChild(defaultOption);

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }

               

        function showAddModal() {
            loadCategoriesForProduct(); // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á modal
            document.getElementById('modalTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            productModal.show();
        }

        function showAddModal() {
            loadCategoriesForProduct(); // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á modal
            document.getElementById('modalTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            productModal.show();
        }

        async function toggleStatus(id, checkbox) {
            try {
                const response = await fetch('/Product/ToggleStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(id)  // ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà id ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                });

                const result = await response.json();
                
                if (result.success) {
                    const status = result.newStatus;
                    const toast = document.createElement('div');
                    toast.className = `alert alert-${status ? 'success' : 'warning'} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
                    toast.innerHTML = `
                        ${result.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.body.appendChild(toast);
                    
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                    checkbox.checked = !checkbox.checked;  // Reset checkbox state
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
                checkbox.checked = !checkbox.checked;  // Reset checkbox state
            }
        }
        // AddCategory
        async function addCategory() {
            const nameInput = document.getElementById('newCategoryName');
            const name = nameInput.value.trim();

            if (!name) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
                nameInput.focus();
                return;
            }

            try {
                const response = await fetch('/Product/AddCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name })
                });

                const result = await response.json();

                if (result.success) {
                    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input
                    nameInput.value = '';
                    nameInput.focus();

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
                    const tbody = document.querySelector('#categoryTable tbody');
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `
                            <td>
                                <span class="category-name">${result.category.name}</span>
                                <input type="text" class="form-control category-edit d-none" value="${result.category.name}">
                            </td>
                            <td>0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-warning edit-btn" onclick="startEditCategory(this, ${result.category.id})">
                                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                </button>
                                <button class="btn btn-sm btn-success save-btn d-none" onclick="saveCategory(this, ${result.category.id})">
                                    üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteCategory(${result.category.id})">
                                    üóëÔ∏è ‡∏•‡∏ö
                                </button>
                            </td>
                                `;
                    tbody.appendChild(newRow);

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dropdown ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    const categorySelect = document.getElementById('categoryId');
                    const option = document.createElement('option');
                    option.value = result.category.id;
                    option.textContent = result.category.name;
                    categorySelect.appendChild(option);

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dropdown filter
                    const filterSelect = document.getElementById('categoryFilter');
                    const filterOption = document.createElement('option');
                    filterOption.value = result.category.id;
                    filterOption.textContent = result.category.name;
                    filterSelect.appendChild(filterOption);

                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                    nameInput.focus();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }
        async function saveCategory(btn, id) {
            const row = btn.closest('tr');
            const input = row.querySelector('.category-edit');
            const name = input.value.trim();

            if (!name) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
                input.focus();
                return;
            }

            try {
                const response = await fetch('/Product/UpdateCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id, name })
                });

                const result = await response.json();

                if (result.success) {
                    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                    const showDeleted = document.getElementById('showDeletedSwitch').checked;
                    loadCategories(showDeleted);

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                    input.focus();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                input.focus();
            }
        }

        async function deleteCategory(id) {
            if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ?')) {
                return;
            }

            try {
                const response = await fetch(`/Product/DeleteCategory?id=${id}`, {  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á id
                    method: 'POST'
                });

                const result = await response.json();

                if (result.success) {
                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    const row = document.querySelector(`tr[data-category-id="${id}"]`);
                    if (row) {
                        row.style.display = 'none';
                    }
                    alert('‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');

                    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                    const showDeleted = document.getElementById('showDeletedSwitch').checked;
                    loadCategories(showDeleted);
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
            }
        }
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        document.getElementById('newCategoryName').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                addCategory();
            }
        });

        // AddProduct
        async function saveProduct() {
            const form = document.getElementById('productForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            try {
                const formData = new FormData();
                const id = document.getElementById('productId').value;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° Id ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô formData
                formData.append('Id', id);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                formData.append('Name', document.getElementById('name').value.trim());
                formData.append('Barcode', document.getElementById('barcode').value.trim());
                formData.append('CategoryId', document.getElementById('categoryId').value);
                formData.append('Price', document.getElementById('price').value);
                formData.append('Stock', document.getElementById('stock').value);

                const imageFile = document.getElementById('image').files[0];
                if (imageFile) {
                    formData.append('imageFile', imageFile);
                }

                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL
                const url = id ? '/Product/Update' : '/Product/Create';
                
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    location.reload();
                } else {
                    alert(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        }        
        async function showEditModal(id) {
            try {
                // ‡πÅ‡∏Å‡πâ URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Route
                const response = await fetch(`/Product/GetProduct/${id}`);
                const result = await response.json();

                if (!result.success) {
                    alert(result.message);
                    return;
                }

                const product = result.data;

                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°
                document.getElementById('productId').value = product.id;
                document.getElementById('categoryId').value = product.categoryId;
                document.getElementById('name').value = product.name;
                document.getElementById('barcode').value = product.barcode;
                document.getElementById('price').value = product.price;
                document.getElementById('stock').value = product.stock;

                // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                const imagePreview = document.getElementById('imagePreview');
                imagePreview.innerHTML = '';
                if (product.imageBase64) {
                    const img = document.createElement('img');
                    img.src = `data:${product.imageType};base64,${product.imageBase64}`;
                    img.classList.add('img-fluid', 'mt-2', 'rounded');
                    img.style.maxHeight = '200px';
                    imagePreview.appendChild(img);
                }

                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Modal
                document.getElementById('modalTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
                
                // ‡πÄ‡∏õ‡∏¥‡∏î Modal
                productModal.show();

            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
            }
        }        
        function confirmDelete(id) {
            if (confirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤?')) {
                deleteProduct(id);
            }
        }

        async function deleteProduct(id) {
            if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ?')) {
                return;
            }

            try {
                const response = await fetch('/Product/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(id)  // ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà id ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
            }
        }

        function filterProducts() {
            const search = document.getElementById('searchInput').value.toLowerCase();
            const categoryId = document.getElementById('categoryFilter').value;
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö HTML
                const categoryCell = row.cells[0];  // ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
                const barcode = row.cells[1].textContent.toLowerCase();  // ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2
                const name = row.cells[2].textContent.toLowerCase();    // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                const categoryMatch = !categoryId || categoryCell.getAttribute('data-category-id') === categoryId;

                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
                const searchMatch = name.includes(search) || barcode.includes(search);

                // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß
                row.style.display = (searchMatch && categoryMatch) ? '' : 'none';

                // Debug
                console.log('Row:', {
                    categoryId: categoryCell.getAttribute('data-category-id'),
                    selectedCategory: categoryId,
                    categoryMatch,
                    searchMatch,
                    visible: row.style.display === ''
                });
            });

            // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö
            const visibleRows = document.querySelectorAll('tbody tr:not([style*="display: none"])').length;
            const totalRows = rows.length;
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            const resultCount = document.getElementById('resultCount');
            if (resultCount) {
                resultCount.textContent = `‡πÅ‡∏™‡∏î‡∏á ${visibleRows} ‡∏à‡∏≤‡∏Å ${totalRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
            }
        }        
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener
        document.addEventListener('DOMContentLoaded', function() {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', filterProducts);
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) {
                categoryFilter.addEventListener('change', filterProducts);
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            filterProducts();
        });

        async function exportTemplate() {
    window.location.href = '/Product/ExportTemplate';
}

        async function importExcel(input) {
            if (!input.files || input.files.length === 0) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå');
                return;
            }

            const file = input.files[0];
            if (!file.name.endsWith('.xlsx')) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
                input.value = '';
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/Product/ImportExcel', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }

            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            input.value = '';
        }

    </script>
}